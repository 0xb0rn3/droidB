main_menu() {
    while true; do
        clear_screen
        display_banner
        
        get_device_info 2>/dev/null
        
        if [[ -n "$DEVICE_INFO" ]]; then
            STATE=$(echo $DEVICE_INFO | grep -oP 'state=\K[^ ]+')
            MODEL=$(echo $DEVICE_INFO | grep -oP 'model=\K[^ ]+')
            echo -e "${GREEN}Device: $MODEL ($STATE)${ENDC}"
        else
            echo -e "${YELLOW}No device connected${ENDC}"
        fi
        
        echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
        echo -e "${BOLD}Main Menu:${ENDC}"
        echo "  1. Device Information"
        echo "  2. Universal Debloater 🗑️"
        echo "  3. App Management"
        echo "  4. File Operations"
        echo "  5. System Operations"
        echo "  6. Fastboot Mode"
        echo "  7. Samsung Operations"
        echo "  8. Device Backup/Restore"
        echo "  9. Shell Access"
        echo "  0. Settings & Tools"
        echo "  q. Exit"
        echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
        
        read -p "Select option: " choice
        
        case $choice in
            1) display_device_info ;;
            2) [[ -n "$SERIAL" ]] && universal_debloater_menu || { echo -e "${RED}No device${ENDC}"; sleep 2; } ;;
            3) app_management_menu ;;
            4) file_operations_menu ;;
            5) system_operations_menu ;;
            6) fastboot_operations ;;
            7) samsung_operations_menu ;;
            8) backup_restore_menu ;;
            9) [[ -n "$SERIAL" ]] && $ADB -s $SERIAL shell || echo -e "${RED}No device${ENDC}" ;;
            0) settings_menu ;;
            q|Q) exit 0 ;;
        esac
    done
}

display_device_info() {
    clear_screen
    echo -e "${BOLD}${CYAN}📱 DEVICE INFORMATION${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    if [[ -z "$DEVICE_INFO" ]]; then
        echo -e "${RED}No device information available${ENDC}"
    else
        echo -e "${GREEN}Serial:${ENDC}           $(echo $DEVICE_INFO | grep -oP 'serial=\K[^ ]+')"
        echo -e "${GREEN}Manufacturer:${ENDC}     $(echo $DEVICE_INFO | grep -oP 'manufacturer=\K[^ ]+')"
        echo -e "${GREEN}Model:${ENDC}            $(echo $DEVICE_INFO | grep -oP 'model=\K[^ ]+')"
        echo -e "${GREEN}Android Version:${ENDC}  $(echo $DEVICE_INFO | grep -oP 'android_version=\K[^ ]+')"
        echo -e "${GREEN}Architecture:${ENDC}     $(echo $DEVICE_INFO | grep -oP 'architecture=\K[^ ]+')"
        echo -e "${GREEN}State:${ENDC}            $(echo $DEVICE_INFO | grep -oP 'state=\K[^ ]+')"
        
        BATTERY=$($ADB -s $SERIAL shell dumpsys battery | grep level | head -1 | awk '{print $2}')
        [[ -n "$BATTERY" ]] && echo -e "${GREEN}Battery:${ENDC}          $BATTERY%"
        
        IP=$($ADB -s $SERIAL shell ip addr show wlan0 2>/dev/null | grep -oP 'inet \K[\d.]+' | head -1)
        [[ -n "$IP" ]] && echo -e "${GREEN}IP Address:${ENDC}       $IP"
    fi
    
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    read -p "Press Enter to continue..."
}

file_operations_menu() {
    clear_screen
    echo -e "${BOLD}${CYAN}📁 FILE OPERATIONS${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo "1. Push file (drag & drop)"
    echo "2. Pull file"
    echo "3. Push directory"
    echo "4. Pull directory"
    echo "5. Screenshot"
    echo "6. Screen recording"
    echo "7. Back"
    
    read -p "Select: " opt
    
    case $opt in
        1)
            echo -e "${YELLOW}Drag & drop file or type path:${ENDC}"
            read -p "File: " FILE
            FILE=$(process_path "$FILE")
            read -p "Device path (default /sdcard/): " DEST
            DEST=${DEST:-/sdcard/}
            [[ -f "$FILE" ]] && $ADB -s $SERIAL push "$FILE" "$DEST"
            ;;
        2)
            read -p "Device file path: " SRC
            read -p "Local destination: " DEST
            DEST=$(process_path "${DEST:-.}")
            $ADB -s $SERIAL pull "$SRC" "$DEST"
            ;;
        3)
            echo -e "${YELLOW}Drag & drop directory or type path:${ENDC}"
            read -p "Directory: " DIR
            DIR=$(process_path "$DIR")
            read -p "Device path: " DEST
            [[ -d "$DIR" ]] && $ADB -s $SERIAL push "$DIR" "$DEST"
            ;;
        4)
            read -p "Device directory: " SRC
            read -p "Local destination: " DEST
            DEST=$(process_path "${DEST:-.}")
            $ADB -s $SERIAL pull "$SRC" "$DEST"
            ;;
        5)
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            $ADB -s $SERIAL shell screencap /sdcard/screenshot_$TIMESTAMP.png
            $ADB -s $SERIAL pull /sdcard/screenshot_$TIMESTAMP.png .
            $ADB -s $SERIAL shell rm /sdcard/screenshot_$TIMESTAMP.png
            echo -e "${GREEN}Screenshot saved: screenshot_$TIMESTAMP.png${ENDC}"
            ;;
        6)
            read -p "Duration (seconds, max 180): " DURATION
            DURATION=${DURATION:-30}
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            echo -e "${BLUE}Recording... Press Ctrl+C to stop${ENDC}"
            $ADB -s $SERIAL shell screenrecord --time-limit=$DURATION /sdcard/recording_$TIMESTAMP.mp4
            $ADB -s $SERIAL pull /sdcard/recording_$TIMESTAMP.mp4 .
            $ADB -s $SERIAL shell rm /sdcard/recording_$TIMESTAMP.mp4
            echo -e "${GREEN}Recording saved: recording_$TIMESTAMP.mp4${ENDC}"
            ;;
    esac
    
    [[ $opt != 7 ]] && read -p "Press Enter..."
}

app_management_menu() {
    clear_screen
    echo -e "${BOLD}${CYAN}📱 APP MANAGEMENT${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo "1. Install APK (drag & drop)"
    echo "2. Uninstall app"
    echo "3. List installed apps"
    echo "4. Clear app data"
    echo "5. Force stop app"
    echo "6. Enable/Disable app"
    echo "7. Extract APK from device"
    echo "8. Back"
    
    read -p "Select: " opt
    
    case $opt in
        1)
            echo -e "${YELLOW}Drag & drop APK or type path:${ENDC}"
            read -p "APK file: " APK
            APK=$(process_path "$APK")
            [[ -f "$APK" ]] && $ADB -s $SERIAL install "$APK"
            ;;
        2)
            read -p "Package name: " PKG
            $ADB -s $SERIAL uninstall $PKG
            ;;
        3)
            echo "1. All apps"
            echo "2. System apps"
            echo "3. User apps"
            read -p "Select: " type
            case $type in
                1) $ADB -s $SERIAL shell pm list packages ;;
                2) $ADB -s $SERIAL shell pm list packages -s ;;
                3) $ADB -s $SERIAL shell pm list packages -3 ;;
            esac
            ;;
        4)
            read -p "Package name: " PKG
            $ADB -s $SERIAL shell pm clear $PKG
            ;;
        5)
            read -p "Package name: " PKG
            $ADB -s $SERIAL shell am force-stop $PKG
            ;;
        6)
            read -p "Package name: " PKG
            echo "1. Enable"
            echo "2. Disable"
            read -p "Select: " action
            case $action in
                1) $ADB -s $SERIAL shell pm enable $PKG ;;
                2) $ADB -s $SERIAL shell pm disable-user $PKG ;;
            esac
            ;;
        7)
            read -p "Package name: " PKG
            APK_PATH=$($ADB -s $SERIAL shell pm path $PKG | cut -d: -f2 | tr -d '\r')
            [[ -n "$APK_PATH" ]] && $ADB -s $SERIAL pull "$APK_PATH" "${PKG}.apk"
            ;;
    esac
    
    [[ $opt != 8 ]] && read -p "Press Enter..."
}

system_operations_menu() {
    clear_screen
    echo -e "${BOLD}${CYAN}⚙️  SYSTEM OPERATIONS${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo "1. Reboot options"
    echo "2. Logcat viewer"
    echo "3. Battery info"
    echo "4. Network info"
    echo "5. System properties"
    echo "6. Running processes"
    echo "7. Back"
    
    read -p "Select: " opt
    
    case $opt in
        1)
            echo "1. Normal reboot"
            echo "2. Recovery"
            echo "3. Bootloader"
            echo "4. Download (Samsung)"
            read -p "Select: " reboot
            case $reboot in
                1) $ADB -s $SERIAL reboot ;;
                2) $ADB -s $SERIAL reboot recovery ;;
                3) $ADB -s $SERIAL reboot bootloader ;;
                4) $ADB -s $SERIAL reboot download ;;
            esac
            ;;
        2)
            echo -e "${GREEN}Logcat (Ctrl+C to stop):${ENDC}"
            $ADB -s $SERIAL logcat
            ;;
        3)
            $ADB -s $SERIAL shell dumpsys battery
            ;;
        4)
            $ADB -s $SERIAL shell ip addr
            $ADB -s $SERIAL shell netstat -an
            ;;
        5)
            $ADB -s $SERIAL shell getprop | less
            ;;
        6)
            $ADB -s $SERIAL shell ps -A
            ;;
    esac
    
    [[ $opt != 7 ]] && read -p "Press Enter..."
}

fastboot_operations() {
    clear_screen
    echo -e "${BOLD}${RED}⚠️  FASTBOOT MODE ⚠️${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    FASTBOOT_DEVICES=$($FASTBOOT devices 2>/dev/null)
    
    if [[ -z "$FASTBOOT_DEVICES" ]]; then
        echo -e "${RED}No devices in fastboot mode${ENDC}"
        echo -e "${CYAN}To enter fastboot:${ENDC}"
        echo "  • adb reboot bootloader"
        echo "  • Volume Down + Power (device off)"
        read -p "Press Enter..."
        return
    fi
    
    echo -e "${GREEN}Fastboot device detected${ENDC}"
    echo "$FASTBOOT_DEVICES"
    echo ""
    
    echo "1. Flash partition"
    echo "2. Boot image (temporary)"
    echo "3. Unlock/Lock bootloader"
    echo "4. Get device info"
    echo "5. Format partition"
    echo "6. Erase partition"
    echo "7. Reboot options"
    echo "8. Back"
    
    read -p "Select option: " choice
    
    case $choice in
        1)
            read -p "Partition name: " PARTITION
            echo -e "${YELLOW}Drag & drop image:${ENDC}"
            read -p "Image: " IMAGE
            IMAGE=$(process_path "$IMAGE")
            [[ -f "$IMAGE" ]] && $FASTBOOT flash $PARTITION "$IMAGE"
            ;;
        2)
            echo -e "${YELLOW}Drag & drop image:${ENDC}"
            read -p "Image: " IMAGE
            IMAGE=$(process_path "$IMAGE")
            [[ -f "$IMAGE" ]] && $FASTBOOT boot "$IMAGE"
            ;;
        3)
            echo "1. Unlock (WIPES DATA)"
            echo "2. Lock"
            read -p "Select: " opt
            case $opt in
                1) $FASTBOOT flashing unlock || $FASTBOOT oem unlock ;;
                2) $FASTBOOT flashing lock || $FASTBOOT oem lock ;;
            esac
            ;;
        4)
            $FASTBOOT getvar all 2>&1 | grep -v "< waiting"
            ;;
        5)
            read -p "Partition: " PARTITION
            read -p "Filesystem (ext4/f2fs): " FS
            $FASTBOOT format:$FS $PARTITION
            ;;
        6)
            read -p "Partition: " PARTITION
            $FASTBOOT erase $PARTITION
            ;;
        7)
            echo "1. Reboot"
            echo "2. Reboot bootloader"
            echo "3. Reboot recovery"
            read -p "Select: " opt
            case $opt in
                1) $FASTBOOT reboot ;;
                2) $FASTBOOT reboot-bootloader ;;
                3) $FASTBOOT reboot recovery ;;
            esac
            ;;
    esac
    
    [[ $choice != 8 ]] && read -p "Press Enter..."
}

samsung_operations_menu() {
    clear_screen
    echo -e "${BOLD}${MAGENTA}📱 SAMSUNG OPERATIONS${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo "Samsung-specific features require additional tools."
    echo "This is a placeholder for Samsung Odin/Heimdall integration."
    echo ""
    read -p "Press Enter to return..."
}

backup_restore_menu() {
    clear_screen
    echo -e "${BOLD}${CYAN}💾 BACKUP & RESTORE${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo "1. Full backup"
    echo "2. Restore backup"
    echo "3. Backup APKs"
    echo "4. Back"
    
    read -p "Select: " opt
    
    case $opt in
        1)
            BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).ab"
            $ADB -s $SERIAL backup -apk -shared -all -f "$BACKUP_FILE"
            ;;
        2)
            echo -e "${YELLOW}Drag & drop backup file:${ENDC}"
            read -p "Backup: " BACKUP
            BACKUP=$(process_path "$BACKUP")
            [[ -f "$BACKUP" ]] && $ADB -s $SERIAL restore "$BACKUP"
            ;;
        3)
            mkdir -p "apk_backup_$(date +%Y%m%d)"
            for pkg in $($ADB -s $SERIAL shell pm list packages -3 | cut -d: -f2); do
                APK_PATH=$($ADB -s $SERIAL shell pm path $pkg | cut -d: -f2 | tr -d '\r')
                [[ -n "$APK_PATH" ]] && $ADB -s $SERIAL pull "$APK_PATH" "apk_backup_$(date +%Y%m%d)/${pkg}.apk" 2>/dev/null
            done
            ;;
    esac
    
    [[ $opt != 4 ]] && read -p "Press Enter..."
}

settings_menu() {
    clear_screen
    echo -e "${BOLD}${CYAN}⚙️  SETTINGS & TOOLS${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo "1. Install system-wide"
    echo "2. About droidB"
    echo "3. Back"
    
    read -p "Select: " opt
    
    case $opt in
        1) install_systemwide ;;
        2)
            echo -e "${BOLD}${BLUE}droidB v$VERSION${ENDC}"
            echo "Advanced Android & Samsung Device Manager"
            echo "With Universal Debloater"
            echo ""
            echo -e "${MAGENTA}Developer: 0xbv1 | 0xb0rn3${ENDC}"
            echo -e "${CYAN}GitHub: https://github.com/0xb0rn3/droidB${ENDC}"
            ;;
    esac
    
    [[ $opt != 3 ]] && read -p "Press Enter..."
}

install_dependencies() {
    echo -e "${BLUE}Installing core dependencies...${ENDC}"
    
    if [[ -f /etc/debian_version ]]; then
        sudo apt update && sudo apt install -y android-tools-adb android-tools-fastboot
    elif [[ -f /etc/arch-release ]]; then
        sudo pacman -S --noconfirm android-tools
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        command -v brew &>/dev/null && brew install android-platform-tools
    fi
}

check_samsung_tools() {
    command -v odin4 &>/dev/null && ODIN4_INSTALLED=true
    command -v heimdall &>/dev/null && HEIMDALL_INSTALLED=true
}

cleanup() {
    echo -e "\n${YELLOW}Cleaning up...${ENDC}"
    [[ -n "$ADB" ]] && $ADB kill-server 2>/dev/null
    rm -f "$DEBLOAT_LIST_FILE" 2>/dev/null
}

trap cleanup EXIT
trap 'echo -e "\n${YELLOW}Interrupted${ENDC}"; exit 130' INT

main() {
    parse_arguments "$@"
    
    if [[ "$DIRECT_FASTBOOT" == true ]]; then
        check_requirements
        fastboot_operations
        exit 0
    elif [[ "$DIRECT_SAMSUNG" == true ]]; then
        check_requirements
        samsung_operations_menu
        exit 0
    elif [[ "$DIRECT_SHELL" == true ]]; then
        check_requirements
        get_device_info
        [[ -n "$SERIAL" ]] && $ADB -s $SERIAL shell
        exit 0
    fi
    
    check_requirements
    main_menu
}

main "$@"#!/usr/bin/env bash

# droidB - Advanced Android & Samsung Device Management Tool with Universal Debloater
# Version: 0.2.0
# Author: 0xbv1 | 0xb0rn3
# GitHub: https://github.com/0xb0rn3/droidB
# License: MIT

set -uo pipefail 

VERSION="0.2.0 Latest | Stable"
SCRIPT_NAME="droidB"
INSTALL_DIR="/usr/local/bin"

# Color definitions
BLUE='\033[94m'
GREEN='\033[92m'
RED='\033[91m'
YELLOW='\033[93m'
MAGENTA='\033[95m'
CYAN='\033[96m'
BOLD='\033[1m'
ENDC='\033[0m'

# Timeout configurations
DEFAULT_TIMEOUT=60
FILE_TIMEOUT=300
BACKUP_TIMEOUT=3600
FASTBOOT_TIMEOUT=600
SAMSUNG_FLASH_TIMEOUT=1800
SAMSUNG_PIT_TIMEOUT=300
SAMSUNG_NAND_TIMEOUT=3600
GSI_FLASH_TIMEOUT=900

# Global variables
SAMSUNG_VENDOR_ID="04e8"
ODIN4_INSTALLED=false
HEIMDALL_INSTALLED=false
DEVICE_EXPLORER_MODE=false
CURRENT_DEVICE_PATH="/sdcard"
DRAG_DROP_ENABLED=true
DIRECT_FASTBOOT=false
DIRECT_SAMSUNG=false
DIRECT_SHELL=false
SERIAL=""
ADB=""
FASTBOOT=""
DEVICE_INFO=""

# GSI-specific variables
GSI_ARCH=""
DEVICE_SLOT=""
TREBLE_ENABLED=false

# Debloat variables
DEBLOAT_LIST_FILE="/tmp/droidb_debloat_list.txt"
CUSTOM_LIST_FILE=""

# Embedded debloat list
create_embedded_debloat_list() {
    cat > "$DEBLOAT_LIST_FILE" << 'EOF'
# Amazon Bloatware
com.amazon.fv
com.amazon.kindle
com.amazon.mp3
com.amazon.mShop.android
com.amazon.venezia

# Android System Bloat
com.android.apps.tag
com.android.backupconfirm
com.android.bips
com.android.bookmarkprovider
com.android.chrome
com.android.dreams.basic
com.android.dreams.phototable
com.android.email
com.android.exchange
com.android.hotwordenrollment.okgoogle
com.android.hotwordenrollment.xgoogle
com.android.internal.display.cutout.emulation.waterfall
com.android.printspooler
com.android.providers.calendar
com.android.providers.partnerbookmarks
com.android.providers.userdictionary
com.android.role.notes.enabled
com.android.settings.intelligence
com.android.sharedstoragebackup
com.android.stk
com.android.wallpapercropper
com.android.wallpaper.livepicker

# Audible
com.audible.application

# Bloatware Apps
com.blurb.checkout
com.cequint.ecid
com.cnn.mobile.android.phone.edgepanel
com.diotek.sec.lookup.dictionary

# ANT+ Services
com.dsi.ant.plugins.antplus
com.dsi.ant.sample.acquirechannels
com.dsi.ant.server
com.dsi.ant.service.socket

# Game Services
com.enhance.gameservice

# Facebook Bloatware
com.facebook.appmanager
com.facebook.katana
com.facebook.services
com.facebook.system

# Flipboard
com.flipboard.app
com.flipboard.boxer.app

# Google Bloatware
com.google.android.aicore
com.google.android.apps.accessibility.voiceaccess
com.google.android.apps.aiwallpapers
com.google.android.apps.bard
com.google.android.apps.books
com.google.android.apps.docs
com.google.android.apps.magazines
com.google.android.apps.maps
com.google.android.apps.photos
com.google.android.apps.plus
com.google.android.apps.restore
com.google.android.apps.tachyon
com.google.android.apps.youtube.music
com.google.android.feedback
com.google.android.gm
com.google.android.gms.supervision
com.google.android.googlequicksearchbox
com.google.android.healthconnect.controller
com.google.android.onetimeinitializer
com.google.android.partnersetup
com.google.android.printservice.recommendation
com.google.android.projection.gearhead
com.google.android.safetycenter.resources
com.google.android.syncadapters.calendar
com.google.android.talk
com.google.android.tts
com.google.android.videos
com.google.android.youtube
com.google.ar.core
com.google.audio.hearing.visualization.accessibility.scribe
com.google.mainline.telemetry
com.google.vr.vrcore

# Sports Apps
com.gotv.nflgamecenter.us.lite

# Office Apps
com.hancom.office.editor.hidden
com.infraware.polarisoffice5

# Social Media
com.imdb.mobile
com.linkedin.android

# Microsoft Apps
com.microsoft.appmanager
com.microsoft.office.excel
com.microsoft.office.officehubrow
com.microsoft.office.outlook
com.microsoft.office.powerpoint
com.microsoft.office.word
com.microsoft.skydrive

# Misc Services
com.mobeam.barcodeService

# Fonts
com.monotype.android.font.chococooky
com.monotype.android.font.cooljazz
com.monotype.android.font.foundation
com.monotype.android.font.rosemary
com.monotype.android.font.samsungone

# Streaming Services
com.netflix.mediaclient

# Keyboard
com.nuance.swype.input
com.touchtype.swiftkey

# Samsung Services
com.osp.app.signin
com.policydm
com.samsung.aasaservice
com.samsung.android.aicore
com.samsung.android.aircommandmanager
com.samsung.android.allshare.service.fileshare
com.samsung.android.allshare.service.mediashare
com.samsung.android.app.advsounddetector
com.samsung.android.app.appsedge
com.samsung.android.app.assistantmenu
com.samsung.android.app.camera.sticker.facear3d.preload
com.samsung.android.app.camera.sticker.facearavatar.preload
com.samsung.android.app.camera.sticker.facearframe.preload
com.samsung.android.app.camera.sticker.facear.preload
com.samsung.android.app.camera.sticker.stamp.preload
com.samsung.android.app.clipboardedge
com.samsung.android.app.cocktailbarservice
com.samsung.android.app.episodes
com.samsung.android.app.filterinstaller
com.samsung.android.app.find
com.samsung.android.app.galaxyfinder
com.samsung.android.app.interpreter
com.samsung.android.app.ledbackcover
com.samsung.android.app.ledcoverdream
com.samsung.android.app.memo
com.samsung.android.app.mirrorlink
com.samsung.android.app.notes
com.samsung.android.app.omcagent
com.samsung.android.app.parentalcare
com.samsung.android.app.readingglass
com.samsung.android.app.reminder
com.samsung.android.app.routines
com.samsung.android.app.sbrowseredge
com.samsung.android.app.settings.bixby
com.samsung.android.app.sharelive
com.samsung.android.app.simplesharing
com.samsung.android.app.sketchbook
com.samsung.android.app.soundpicker
com.samsung.android.app.spage
com.samsung.android.app.storyalbumwidget
com.samsung.android.app.talkback
com.samsung.android.app.taskedge
com.samsung.android.app.tips
com.samsung.android.app.updatecenter
com.samsung.android.app.vrsetupwizardstub
com.samsung.android.app.watchmanager
com.samsung.android.app.watchmanagerstub
com.samsung.android.app.withtv
com.samsung.android.ardrawing
com.samsung.android.aremoji
com.samsung.android.aremojieditor
com.samsung.android.arzone
com.samsung.android.authfw
com.samsung.android.aware.service
com.samsung.android.bbc.bbcagent
com.samsung.android.beaconmanager

# Bixby
com.samsung.android.bixby.agent
com.samsung.android.bixby.agent.dummy
com.samsung.android.bixby.es.globalaction
com.samsung.android.bixby.ondevice.enus
com.samsung.android.bixby.ondevice.esus
com.samsung.android.bixby.plmsync
com.samsung.android.bixby.service
com.samsung.android.bixbyvision.framework
com.samsung.android.bixby.voiceinput
com.samsung.android.bixby.wakeup

# More Samsung Bloat
com.samsung.android.calendar
com.samsung.android.carkey
com.samsung.android.coldwalletservice
com.samsung.android.da.daagent
com.samsung.android.dbsc
com.samsung.android.dkey
com.samsung.android.dlp.service
com.samsung.android.drivelink.stub
com.samsung.android.easysetup
com.samsung.android.email.provider
com.samsung.android.ese
com.samsung.android.fmm
com.samsung.android.forest
com.samsung.android.game.gamehome
com.samsung.android.game.gametools
com.samsung.android.game.gos
com.samsung.android.gametuner.thin
com.samsung.android.globalpostprocmgr
com.samsung.android.gru
com.samsung.android.hmt.vrshell
com.samsung.android.hmt.vrsvc
com.samsung.android.hwresourceshare.storage
com.samsung.android.intellivoiceservice
com.samsung.android.ipsgeofence
com.samsung.android.keyguardwallpaperupdator
com.samsung.android.kidsinstaller
com.samsung.android.knox.analytics.uploader
com.samsung.android.knox.zt.framework
com.samsung.android.liveeffectservice
com.samsung.android.mapsagent
com.samsung.android.mateagent
com.samsung.android.mdecservice
com.samsung.android.mdm
com.samsung.android.mdx
com.samsung.android.mdx.kit
com.samsung.android.messaging
com.samsung.android.mobileservice
com.samsung.android.net.wifi.wifiguider
com.samsung.android.nmt.apps.t2t.languagepack.enesus
com.samsung.android.offline.languagemodel
com.samsung.android.oneconnect
com.samsung.android.rajaampat
com.samsung.android.samsungpass
com.samsung.android.samsungpassautofill
com.samsung.android.scloud
com.samsung.android.scpm
com.samsung.android.sdk.ocr
com.samsung.android.sdk.professionalaudio.utility.jammonitor
com.samsung.android.server.iris
com.samsung.android.service.livedrawing
com.samsung.android.service.peoplestripe
com.samsung.android.service.stplatform
com.samsung.android.service.tagservice
com.samsung.android.service.travel
com.samsung.android.setting.multisound
com.samsung.android.smartmirroring
com.samsung.android.smartsuggestions
com.samsung.android.smartswitchassistant
com.samsung.android.spay
com.samsung.android.spayfw
com.samsung.android.spdfnote
com.samsung.android.ssco
com.samsung.android.stickercenter
com.samsung.android.stickerplugin
com.samsung.android.svoice
com.samsung.android.svoiceime
com.samsung.android.themecenter
com.samsung.android.themestore
com.samsung.android.tripwidget
com.samsung.android.tvplus
com.samsung.android.visionarapps
com.samsung.android.visioncloudagent
com.samsung.android.visionintelligence
com.samsung.android.vision.model
com.samsung.android.visual.cloudcore
com.samsung.android.voc
com.samsung.android.voicewakeup
com.samsung.android.vtcamerasettings
com.samsung.android.widgetapp.yahooedge.finance
com.samsung.android.widgetapp.yahooedge.sport
com.samsung.app.highlightplayer
com.samsung.app.newtrim
com.samsung.daydream.customization
com.samsung.dcmservice
com.samsung.desktopsystemui
com.samsung.ecomm
com.samsung.enhanceservice
com.samsung.faceservice
com.samsung.fresco.logging
com.samsung.groupcast
com.samsung.hs20provider
com.samsung.ipservice
com.samsung.knox.appsupdateagent
com.samsung.knox.rcp.components
com.samsung.knox.securefolder
com.samsung.knox.securefolder.setuppage
com.samsung.petservice
com.samsung.safetyinformation
com.samsung.sec.android.application.csc
com.samsung.SMT
com.samsung.sree
com.samsung.storyservice
com.samsung.svoice.sync
com.samsung.systemui.bixby
com.samsung.systemui.bixby2
com.samsung.ucs.agent.ese
com.samsung.voiceserviceplatform

# SEC Android Apps
com.sec.android.app.apex
com.sec.android.app.applinker
com.sec.android.app.billing
com.sec.android.app.bluetoothtest
com.sec.android.app.chromecustomizations
com.sec.android.app.clockpackage
com.sec.android.app.DataCreate
com.sec.android.app.desktoplauncher
com.sec.android.app.dexonpc
com.sec.android.app.factorykeystring
com.sec.android.app.gamehub
com.sec.android.app.hwmoduletest
com.sec.android.app.kidshome
com.sec.android.app.magnifier
com.sec.android.app.myfiles
com.sec.android.app.ocr
com.sec.android.app.parser
com.sec.android.app.personalization
com.sec.android.app.popupcalculator
com.sec.android.app.quicktool
com.sec.android.app.ringtoneBR
com.sec.android.app.safetyassurance
com.sec.android.app.samsungapps
com.sec.android.app.sbrowser
com.sec.android.app.SecSetupWizard
com.sec.android.app.servicemodeapp
com.sec.android.app.setupwizard
com.sec.android.app.shealth
com.sec.android.app.SmartClipEdgeService
com.sec.android.app.soundalive
com.sec.android.app.sysscope
com.sec.android.app.tfunlock
com.sec.android.app.tourviewer
com.sec.android.app.translator
com.sec.android.app.vepreload
com.sec.android.app.ve.vebgm
com.sec.android.app.voicenote
com.sec.android.app.wfdbroker
com.sec.android.app.withtv
com.sec.android.app.wlantest
com.sec.android.autodoodle.service
com.sec.android.AutoPreconfig
com.sec.android.cover.ledcover
com.sec.android.desktopmode.uiservice
com.sec.android.dexsystemui
com.sec.android.diagmonagent
com.sec.android.easyMover
com.sec.android.easyMover.Agent
com.sec.android.easyonehand
com.sec.android.emergencylauncher
com.sec.android.mimage.avatarstickers
com.sec.android.mimage.gear360editor
com.sec.android.mimage.photoretouching
com.sec.android.ofviewer
com.sec.android.omc
com.sec.android.Preconfig
com.sec.android.preloadinstaller
com.sec.android.provider.snote
com.sec.android.providers.security
com.sec.android.providers.tasks
com.sec.android.RilServiceModeApp
com.sec.android.sdhms
com.sec.android.service.health
com.sec.android.sidesync30
com.sec.android.splitsound
com.sec.android.uibcvirtualsoftkey
com.sec.android.widgetapp.diotek.smemo
com.sec.android.widgetapp.easymodecontactswidget
com.sec.android.widgetapp.samsungapps
com.sec.app.TransmitPowerService
com.sec.automation
com.sec.bcservice
com.sec.downloadablekeystore
com.sec.enterprise.knox.attestation
com.sec.enterprise.knox.cloudmdm.smdms
com.sec.enterprise.mdm.services.simpin
com.sec.enterprise.mdm.vpn
com.sec.epdgtestapp
com.sec.everglades
com.sec.everglades.update
com.sec.factory
com.sec.factory.camera
com.sec.factory.iris.usercamera
com.sec.hearingadjust
com.sec.kidsplat.installer
com.sec.knox.foldercontainer
com.sec.knox.knoxsetupwizardclient
com.sec.knox.switcher
com.sec.location.nsflp2
com.sec.mldapchecker
com.sec.modem.settings
com.sec.penup
com.sec.providers.assisteddialing
com.sec.readershub
com.sec.smartcard.manager
com.sec.spen.flashannotate
com.sec.spp.push
com.sec.sve
com.sec.usbsettings
com.sec.vowifispg
com.sec.yosemite.phone
com.sem.factoryapp

# Other Bloatware
com.singtel.mysingtel
com.skms.android.agent
com.skype.raider
com.spotify.music
com.srin.indramayu
com.test.LTEfunctionality
com.tripadvisor.tripadvisor
com.trustonic.tuiservice
com.tv.peel.samsung.app
com.vlingo.midas
com.wssnps
com.yelp.android.samsungedge
EOF
}

# Installation function
install_systemwide() {
    echo -e "${BOLD}${GREEN}droidB System-Wide Installation${ENDC}"
    echo -e "${BLUE}Installing droidB to $INSTALL_DIR...${ENDC}"
    
    if [[ $EUID -ne 0 ]]; then
        echo -e "${YELLOW}Root privileges required for system installation.${ENDC}"
        echo -e "${BLUE}Attempting sudo installation...${ENDC}"
        
        sudo cp "$0" "$INSTALL_DIR/$SCRIPT_NAME" 2>/dev/null || {
            echo -e "${RED}Failed to install. Please run: sudo $0 --install${ENDC}"
            exit 1
        }
        sudo chmod +x "$INSTALL_DIR/$SCRIPT_NAME" 2>/dev/null
        sudo ln -sf "$INSTALL_DIR/$SCRIPT_NAME" "/usr/bin/$SCRIPT_NAME" 2>/dev/null || true
        
        echo -e "${GREEN}✓ droidB installed successfully!${ENDC}"
        echo -e "${GREEN}You can now run it from anywhere with: ${BOLD}$SCRIPT_NAME${ENDC}"
    else
        cp "$0" "$INSTALL_DIR/$SCRIPT_NAME"
        chmod +x "$INSTALL_DIR/$SCRIPT_NAME"
        ln -sf "$INSTALL_DIR/$SCRIPT_NAME" "/usr/bin/$SCRIPT_NAME" 2>/dev/null || true
        
        echo -e "${GREEN}✓ droidB installed successfully!${ENDC}"
        echo -e "${GREEN}You can now run it from anywhere with: ${BOLD}$SCRIPT_NAME${ENDC}"
    fi
    
    create_desktop_entry
    setup_bash_completion
    
    echo -e "${CYAN}Installation complete! Features:${ENDC}"
    echo -e "  • System-wide access: run '$SCRIPT_NAME' from anywhere"
    echo -e "  • Drag & drop support for file paths"
    echo -e "  • Tab completion enabled"
    echo -e "  • Desktop launcher created (if GUI available)"
    
    exit 0
}

create_desktop_entry() {
    if [[ -d "/usr/share/applications" ]]; then
        cat > /tmp/droidb.desktop << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=droidB
Comment=Advanced Android & Samsung Device Manager
Exec=$INSTALL_DIR/$SCRIPT_NAME
Icon=android
Terminal=true
Categories=Development;Utility;
Keywords=android;adb;fastboot;samsung;odin;
EOF
        sudo mv /tmp/droidb.desktop /usr/share/applications/ 2>/dev/null || true
        echo -e "${GREEN}Desktop entry created${ENDC}"
    fi
}

setup_bash_completion() {
    COMPLETION_SCRIPT="/etc/bash_completion.d/droidb"
    if [[ -d "/etc/bash_completion.d" ]]; then
        cat > /tmp/droidb_completion << 'EOF'
_droidb() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--help --version --install --uninstall --device --fastboot --samsung --shell"
    
    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _droidb droidb
EOF
        sudo mv /tmp/droidb_completion "$COMPLETION_SCRIPT" 2>/dev/null || true
        echo -e "${GREEN}Bash completion installed${ENDC}"
    fi
}

uninstall_systemwide() {
    echo -e "${BOLD}${RED}droidB Uninstallation${ENDC}"
    
    if [[ $EUID -ne 0 ]]; then
        echo -e "${YELLOW}Root privileges required for uninstallation.${ENDC}"
        sudo "$0" --uninstall
        exit 0
    fi
    
    rm -f "$INSTALL_DIR/$SCRIPT_NAME" 2>/dev/null
    rm -f "/usr/bin/$SCRIPT_NAME" 2>/dev/null
    rm -f "/usr/share/applications/droidb.desktop" 2>/dev/null
    rm -f "/etc/bash_completion.d/droidb" 2>/dev/null
    
    echo -e "${GREEN}droidB uninstalled successfully.${ENDC}"
    exit 0
}

parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --install)
                install_systemwide
                ;;
            --uninstall)
                uninstall_systemwide
                ;;
            --version|-v)
                echo "droidB version $VERSION"
                exit 0
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            --device|-d)
                shift
                SERIAL="$1"
                ;;
            --fastboot|-f)
                DIRECT_FASTBOOT=true
                ;;
            --samsung|-s)
                DIRECT_SAMSUNG=true
                ;;
            --shell)
                DIRECT_SHELL=true
                ;;
            *)
                echo -e "${RED}Unknown option: $1${ENDC}"
                show_help
                exit 1
                ;;
        esac
        shift
    done
}

show_help() {
    cat << EOF
${BOLD}${BLUE}droidB v$VERSION - Advanced Android & Samsung Device Manager${ENDC}

${BOLD}USAGE:${ENDC}
    $SCRIPT_NAME [OPTIONS]

${BOLD}OPTIONS:${ENDC}
    --install           Install droidB system-wide
    --uninstall         Remove droidB from system
    --version, -v       Show version information
    --help, -h          Show this help message
    --device, -d        Specify device serial
    --fastboot, -f      Jump directly to fastboot menu
    --samsung, -s       Jump directly to Samsung menu
    --shell             Open ADB shell directly

${BOLD}FEATURES:${ENDC}
    • Full ADB/Fastboot automation
    • Samsung device support (Odin4 + Heimdall)
    • Universal Debloater with embedded app lists
    • Visual file explorer with drag & drop
    • Batch operations and backups
    • Security-focused design

${BOLD}EXAMPLES:${ENDC}
    $SCRIPT_NAME                    # Start interactive mode
    $SCRIPT_NAME --install          # Install system-wide
    $SCRIPT_NAME --device SERIAL    # Connect to specific device

${BOLD}AUTHOR:${ENDC}
    0xbv1 | 0xb0rn3
    https://github.com/0xb0rn3/droidB

EOF
}

clear_screen() {
    clear
    echo -ne "\033]0;droidB v$VERSION\007"
}

display_banner() {
    clear_screen
    echo -e "${CYAN}"
    cat << 'EOF'
    ╔══════════════════════════════════════════════════════════╗
    ║                                                          ║
    ║     ██████╗ ██████╗  ██████╗ ██╗██████╗ ██████╗        ║
    ║     ██╔══██╗██╔══██╗██╔═══██╗██║██╔══██╗██╔══██╗       ║
    ║     ██║  ██║██████╔╝██║   ██║██║██║  ██║██████╔╝       ║
    ║     ██║  ██║██╔══██╗██║   ██║██║██║  ██║██╔══██╗       ║
    ║     ██████╔╝██║  ██║╚██████╔╝██║██████╔╝██████╔╝       ║
    ║     ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝╚═════╝ ╚═════╝        ║
    ║                                                          ║
    ╚══════════════════════════════════════════════════════════╝
EOF
    echo -e "${ENDC}"
    echo -e "${BOLD}${BLUE}    Advanced Android & Samsung Device Manager v${VERSION}${ENDC}"
    echo -e "${GREEN}    Security-Focused | Universal Debloater | Drag & Drop${ENDC}"
    echo -e "${MAGENTA}    Developer: ${BOLD}0xbv1 | 0xb0rn3${ENDC}"
    echo -e "${CYAN}    GitHub: ${BOLD}https://github.com/0xb0rn3/droidB${ENDC}"
    echo -e "${YELLOW}════════════════════════════════════════════════════════════${ENDC}"
}

process_path() {
    local input="$1"
    input="${input#\'}"
    input="${input%\'}"
    input="${input#\"}"
    input="${input%\"}"
    input="${input//\\ / }"
    input="${input/#\~/$HOME}"
    echo "$input"
}

confirm_action() {
    local prompt="$1"
    read -p "${BOLD}${YELLOW}$prompt (y/N): ${ENDC}" response
    [[ "$response" =~ ^[Yy]$ ]]
}

get_device_info() {
    DEVICES=$($ADB devices 2>/dev/null | tail -n +2 | grep -v "^$")
    
    if [[ -z "$DEVICES" ]]; then
        echo -e "${RED}No devices detected${ENDC}"
        DEVICE_INFO=""
        return 1
    fi
    
    DEVICE_COUNT=$(echo "$DEVICES" | wc -l)
    
    if [[ $DEVICE_COUNT -gt 1 ]]; then
        echo -e "${GREEN}Multiple devices connected:${ENDC}"
        echo "$DEVICES" | nl -w 2 -s '. '
        read -p "Select device (number): " CHOICE
        SERIAL=$(echo "$DEVICES" | sed -n "${CHOICE}p" | awk '{print $1}')
    else
        SERIAL=$(echo "$DEVICES" | awk '{print $1}')
    fi
    
    STATE=$($ADB devices | grep $SERIAL | awk '{print $2}')
    
    if [[ "$STATE" == "unauthorized" ]]; then
        echo -e "${RED}Device unauthorized. Check device screen${ENDC}"
        DEVICE_INFO="serial=$SERIAL state=$STATE"
        return 1
    fi
    
    MODEL=$($ADB -s $SERIAL shell getprop ro.product.model 2>/dev/null | tr -d '\r')
    ANDROID_VERSION=$($ADB -s $SERIAL shell getprop ro.build.version.release 2>/dev/null | tr -d '\r')
    MANUFACTURER=$($ADB -s $SERIAL shell getprop ro.product.manufacturer 2>/dev/null | tr -d '\r')
    ARCHITECTURE=$($ADB -s $SERIAL shell getprop ro.product.cpu.abi 2>/dev/null | tr -d '\r')
    
    DEVICE_INFO="serial=$SERIAL model=$MODEL android_version=$ANDROID_VERSION manufacturer=$MANUFACTURER architecture=$ARCHITECTURE state=$STATE"
    
    return 0
}

# DEBLOATER FUNCTIONS

universal_debloater_menu() {
    while true; do
        clear_screen
        echo -e "${BOLD}${MAGENTA}🗑️  UNIVERSAL DEBLOATER${ENDC}"
        echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
        
        if [[ -z "$SERIAL" ]]; then
            echo -e "${RED}No device connected${ENDC}"
            read -p "Press Enter to return..."
            return
        fi
        
        echo -e "${GREEN}Device: $(echo $DEVICE_INFO | grep -oP 'model=\K[^ ]+')${ENDC}"
        echo -e "${CYAN}Serial: $SERIAL${ENDC}"
        echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
        
        local app_count=$(grep -v "^$" "$DEBLOAT_LIST_FILE" | grep -v "^#" | wc -l)
        echo -e "${BOLD}Embedded bloatware list: ${GREEN}$app_count packages${ENDC}"
        
        echo ""
        echo "1. Debloat with embedded list (recommended)"
        echo "2. Debloat with custom list file"
        echo "3. Preview embedded debloat list"
        echo "4. Selective debloat (choose apps)"
        echo "5. Scan device for bloatware"
        echo "6. Revert/Restore debloated apps"
        echo "7. Create backup before debloat"
        echo "8. Export embedded list to file"
        echo "9. Back to main menu"
        echo ""
        
        read -p "Select option: " choice
        
        case $choice in
            1) debloat_with_embedded_list ;;
            2) debloat_with_custom_list ;;
            3) preview_debloat_list ;;
            4) selective_debloat ;;
            5) scan_for_bloatware ;;
            6) revert_debloat ;;
            7) backup_before_debloat ;;
            8) export_embedded_list ;;
            9) return ;;
            *)
                echo -e "${RED}Invalid option${ENDC}"
                sleep 1
                ;;
        esac
    done
}

debloat_with_embedded_list() {
    clear_screen
    echo -e "${BOLD}${RED}⚠️  DEBLOAT WITH EMBEDDED LIST ⚠️${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    local app_count=$(grep -v "^$" "$DEBLOAT_LIST_FILE" | grep -v "^#" | wc -l)
    echo -e "${WHITE}This will remove ${GREEN}$app_count${WHITE} bloatware packages from your device.${ENDC}"
    echo -e "${YELLOW}These apps will be uninstalled for the current user (data preserved).${ENDC}"
    echo -e "${CYAN}You can restore them later using the revert function.${ENDC}"
    echo ""
    echo -e "${RED}WARNING: Some apps may be needed for certain features.${ENDC}"
    echo -e "${RED}Review the list (option 3) before proceeding if unsure.${ENDC}"
    echo ""
    
    confirm_action "Proceed with debloat?" || return
    
    echo ""
    echo -e "${BLUE}Starting debloat process...${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    local success_count=0
    local fail_count=0
    local not_found_count=0
    
    while IFS= read -r package; do
        if [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]]; then
            continue
        fi
        
        package=$(echo "$package" | xargs)
        
        echo -ne "${CYAN}Processing: ${WHITE}$package${ENDC}..."
        
        if $ADB -s $SERIAL shell pm list packages | grep -q "^package:$package$"; then
            if $ADB -s $SERIAL shell pm uninstall -k --user 0 "$package" 2>/dev/null | grep -q "Success"; then
                echo -e " ${GREEN}[✓ REMOVED]${ENDC}"
                ((success_count++))
            else
                echo -e " ${RED}[✗ FAILED]${ENDC}"
                ((fail_count++))
            fi
        else
            echo -e " ${YELLOW}[- NOT FOUND]${ENDC}"
            ((not_found_count++))
        fi
    done < "$DEBLOAT_LIST_FILE"
    
    echo ""
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    echo -e "${BOLD}${GREEN}Debloat Summary:${ENDC}"
    echo -e "${GREEN}  ✓ Successfully removed: $success_count packages${ENDC}"
    echo -e "${RED}  ✗ Failed to remove: $fail_count packages${ENDC}"
    echo -e "${YELLOW}  - Not found on device: $not_found_count packages${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo ""
    read -p "Reboot device now? (y/N): " reboot_choice
    if [[ "$reboot_choice" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Rebooting device...${ENDC}"
        $ADB -s $SERIAL reboot
        echo -e "${GREEN}Reboot command sent${ENDC}"
    else
        echo -e "${YELLOW}Remember to reboot for best results${ENDC}"
    fi
    
    read -p "Press Enter to continue..."
}

debloat_with_custom_list() {
    clear_screen
    echo -e "${BOLD}${CYAN}DEBLOAT WITH CUSTOM LIST${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo -e "${WHITE}Drag & drop your custom debloat list file:${ENDC}"
    echo -e "${CYAN}Format: One package name per line, # for comments${ENDC}"
    echo ""
    
    read -p "File path: " custom_file
    custom_file=$(process_path "$custom_file")
    
    if [[ ! -f "$custom_file" ]]; then
        echo -e "${RED}File not found: $custom_file${ENDC}"
        sleep 2
        return
    fi
    
    local app_count=$(grep -v "^$" "$custom_file" | grep -v "^#" | wc -l)
    echo ""
    echo -e "${GREEN}Found $app_count packages in custom list${ENDC}"
    echo ""
    
    confirm_action "Proceed with custom debloat?" || return
    
    echo ""
    echo -e "${BLUE}Starting custom debloat process...${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    local success_count=0
    local fail_count=0
    local not_found_count=0
    
    while IFS= read -r package; do
        if [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]]; then
            continue
        fi
        
        package=$(echo "$package" | xargs)
        
        echo -ne "${CYAN}Processing: ${WHITE}$package${ENDC}..."
        
        if $ADB -s $SERIAL shell pm list packages | grep -q "^package:$package$"; then
            if $ADB -s $SERIAL shell pm uninstall -k --user 0 "$package" 2>/dev/null | grep -q "Success"; then
                echo -e " ${GREEN}[✓ REMOVED]${ENDC}"
                ((success_count++))
            else
                echo -e " ${RED}[✗ FAILED]${ENDC}"
                ((fail_count++))
            fi
        else
            echo -e " ${YELLOW}[- NOT FOUND]${ENDC}"
            ((not_found_count++))
        fi
    done < "$custom_file"
    
    echo ""
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    echo -e "${BOLD}${GREEN}Custom Debloat Summary:${ENDC}"
    echo -e "${GREEN}  ✓ Successfully removed: $success_count packages${ENDC}"
    echo -e "${RED}  ✗ Failed to remove: $fail_count packages${ENDC}"
    echo -e "${YELLOW}  - Not found on device: $not_found_count packages${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    read -p "Press Enter to continue..."
}

preview_debloat_list() {
    clear_screen
    echo -e "${BOLD}${CYAN}EMBEDDED DEBLOAT LIST PREVIEW${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    local app_count=$(grep -v "^$" "$DEBLOAT_LIST_FILE" | grep -v "^#" | wc -l)
    echo -e "${GREEN}Total packages: $app_count${ENDC}"
    echo ""
    
    echo -e "${CYAN}Categories in list:${ENDC}"
    grep "^#" "$DEBLOAT_LIST_FILE" | grep -v "^# $" | sed 's/^# /  • /'
    
    echo ""
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    echo -e "${WHITE}Full list:${ENDC}"
    echo ""
    
    cat "$DEBLOAT_LIST_FILE" | less
    
    read -p "Press Enter to continue..."
}

selective_debloat() {
    clear_screen
    echo -e "${BOLD}${CYAN}SELECTIVE DEBLOAT${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo "1. Amazon bloatware"
    echo "2. Facebook apps"
    echo "3. Google apps"
    echo "4. Microsoft Office"
    echo "5. Samsung bloatware"
    echo "6. Bixby services"
    echo "7. Game services"
    echo "8. Social media apps"
    echo "9. All of the above"
    echo "0. Custom package names"
    echo ""
    
    read -p "Select category: " category
    
    local packages=""
    
    case $category in
        1)
            packages="com.amazon.fv com.amazon.kindle com.amazon.mp3 com.amazon.mShop.android com.amazon.venezia"
            ;;
        2)
            packages="com.facebook.appmanager com.facebook.katana com.facebook.services com.facebook.system"
            ;;
        3)
            packages="com.google.android.apps.docs com.google.android.apps.maps com.google.android.apps.photos com.google.android.youtube com.google.android.gm"
            ;;
        4)
            packages="com.microsoft.office.excel com.microsoft.office.word com.microsoft.office.powerpoint com.microsoft.office.outlook"
            ;;
        5)
            packages="com.samsung.android.app.sbrowseredge com.samsung.android.samsungpass com.samsung.android.app.tips com.samsung.android.tvplus"
            ;;
        6)
            packages="com.samsung.android.bixby.agent com.samsung.android.bixby.service com.samsung.android.bixby.wakeup com.samsung.android.bixbyvision.framework"
            ;;
        7)
            packages="com.samsung.android.game.gamehome com.samsung.android.game.gametools com.samsung.android.game.gos com.enhance.gameservice"
            ;;
        8)
            packages="com.linkedin.android com.spotify.music com.netflix.mediaclient"
            ;;
        9)
            debloat_with_embedded_list
            return
            ;;
        0)
            echo ""
            echo -e "${WHITE}Enter package names (space separated):${ENDC}"
            read -p "> " packages
            ;;
        *)
            echo -e "${RED}Invalid option${ENDC}"
            sleep 1
            return
            ;;
    esac
    
    if [[ -z "$packages" ]]; then
        echo -e "${RED}No packages selected${ENDC}"
        sleep 1
        return
    fi
    
    echo ""
    echo -e "${YELLOW}Packages to remove:${ENDC}"
    for pkg in $packages; do
        echo -e "  • $pkg"
    done
    echo ""
    
    confirm_action "Remove these packages?" || return
    
    echo ""
    echo -e "${BLUE}Removing packages...${ENDC}"
    
    local success_count=0
    local fail_count=0
    
    for package in $packages; do
        echo -ne "${CYAN}Removing: ${WHITE}$package${ENDC}..."
        if $ADB -s $SERIAL shell pm uninstall -k --user 0 "$package" 2>/dev/null | grep -q "Success"; then
            echo -e " ${GREEN}[✓]${ENDC}"
            ((success_count++))
        else
            echo -e " ${RED}[✗]${ENDC}"
            ((fail_count++))
        fi
    done
    
    echo ""
    echo -e "${GREEN}Removed: $success_count${ENDC} | ${RED}Failed: $fail_count${ENDC}"
    
    read -p "Press Enter to continue..."
}

scan_for_bloatware() {
    clear_screen
    echo -e "${BOLD}${CYAN}SCAN DEVICE FOR BLOATWARE${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo -e "${BLUE}Scanning device for known bloatware...${ENDC}"
    echo ""
    
    local found_count=0
    local bloatware_found=""
    
    while IFS= read -r package; do
        if [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]]; then
            continue
        fi
        
        package=$(echo "$package" | xargs)
        
        if $ADB -s $SERIAL shell pm list packages | grep -q "^package:$package$"; then
            echo -e "${RED}[FOUND]${ENDC} $package"
            ((found_count++))
            bloatware_found="$bloatware_found $package"
        fi
    done < "$DEBLOAT_LIST_FILE"
    
    echo ""
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    echo -e "${BOLD}Scan Summary:${ENDC}"
    echo -e "${RED}Found $found_count bloatware packages on device${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    if [[ $found_count -gt 0 ]]; then
        echo ""
        read -p "Remove all found bloatware? (y/N): " remove_choice
        if [[ "$remove_choice" =~ ^[Yy]$ ]]; then
            debloat_with_embedded_list
            return
        fi
    fi
    
    read -p "Press Enter to continue..."
}

revert_debloat() {
    clear_screen
    echo -e "${BOLD}${GREEN}REVERT/RESTORE DEBLOATED APPS${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo "1. Restore all apps from embedded list"
    echo "2. Restore from custom list file"
    echo "3. Restore specific packages"
    echo "4. Back"
    echo ""
    
    read -p "Select option: " choice
    
    case $choice in
        1)
            restore_from_list "$DEBLOAT_LIST_FILE"
            ;;
        2)
            echo ""
            echo -e "${WHITE}Drag & drop list file:${ENDC}"
            read -p "File path: " custom_file
            custom_file=$(process_path "$custom_file")
            
            if [[ -f "$custom_file" ]]; then
                restore_from_list "$custom_file"
            else
                echo -e "${RED}File not found${ENDC}"
                sleep 2
            fi
            ;;
        3)
            echo ""
            echo -e "${WHITE}Enter package names (space separated):${ENDC}"
            read -p "> " packages
            
            if [[ -n "$packages" ]]; then
                restore_specific_packages "$packages"
            fi
            ;;
        4)
            return
            ;;
    esac
}

restore_from_list() {
    local list_file="$1"
    
    echo ""
    echo -e "${RED}⚠️  WARNING: This will attempt to restore all packages from the list${ENDC}"
    echo -e "${YELLOW}Only system apps can be restored. Third-party apps need reinstallation.${ENDC}"
    echo ""
    
    confirm_action "Proceed with restoration?" || return
    
    echo ""
    echo -e "${BLUE}Starting restoration process...${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    local success_count=0
    local fail_count=0
    
    while IFS= read -r package; do
        if [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]]; then
            continue
        fi
        
        package=$(echo "$package" | xargs)
        
        echo -ne "${CYAN}Restoring: ${WHITE}$package${ENDC}..."
        
        if $ADB -s $SERIAL shell cmd package install-existing "$package" 2>/dev/null | grep -Ev "(Failure|doesn't exist)" > /dev/null; then
            echo -e " ${GREEN}[✓ RESTORED]${ENDC}"
            ((success_count++))
        else
            echo -e " ${RED}[✗ FAILED]${ENDC}"
            ((fail_count++))
        fi
    done < "$list_file"
    
    echo ""
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    echo -e "${BOLD}${GREEN}Restoration Summary:${ENDC}"
    echo -e "${GREEN}  ✓ Successfully restored: $success_count packages${ENDC}"
    echo -e "${RED}  ✗ Failed to restore: $fail_count packages${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    read -p "Press Enter to continue..."
}

restore_specific_packages() {
    local packages="$1"
    
    echo ""
    echo -e "${BLUE}Restoring packages...${ENDC}"
    
    local success_count=0
    local fail_count=0
    
    for package in $packages; do
        echo -ne "${CYAN}Restoring: ${WHITE}$package${ENDC}..."
        
        if $ADB -s $SERIAL shell cmd package install-existing "$package" 2>/dev/null | grep -Ev "(Failure|doesn't exist)" > /dev/null; then
            echo -e " ${GREEN}[✓]${ENDC}"
            ((success_count++))
        else
            echo -e " ${RED}[✗]${ENDC}"
            ((fail_count++))
        fi
    done
    
    echo ""
    echo -e "${GREEN}Restored: $success_count${ENDC} | ${RED}Failed: $fail_count${ENDC}"
    
    read -p "Press Enter to continue..."
}

backup_before_debloat() {
    clear_screen
    echo -e "${BOLD}${CYAN}BACKUP BEFORE DEBLOAT${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    echo -e "${WHITE}Creating package list backup...${ENDC}"
    
    local backup_file="debloat_backup_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "# droidB Debloat Backup - $(date)" > "$backup_file"
    echo "# Device: $(echo $DEVICE_INFO | grep -oP 'model=\K[^ ]+')" >> "$backup_file"
    echo "# Serial: $SERIAL" >> "$backup_file"
    echo "# " >> "$backup_file"
    
    $ADB -s $SERIAL shell pm list packages | sed 's/package://' >> "$backup_file"
    
    echo ""
    echo -e "${GREEN}✓ Backup saved: $backup_file${ENDC}"
    echo -e "${CYAN}This file contains all currently installed packages${ENDC}"
    echo ""
    
    read -p "Proceed to debloat menu? (Y/n): " proceed
    if [[ ! "$proceed" =~ ^[Nn]$ ]]; then
        universal_debloater_menu
    fi
}

export_embedded_list() {
    clear_screen
    echo -e "${BOLD}${CYAN}EXPORT EMBEDDED LIST${ENDC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${ENDC}"
    
    local export_file="droidb_debloat_list_$(date +%Y%m%d).txt"
    
    read -p "Export filename (default: $export_file): " custom_name
    if [[ -n "$custom_name" ]]; then
        export_file="$custom_name"
    fi
    
    cp "$DEBLOAT_LIST_FILE" "$export_file"
    
    echo ""
    echo -e "${GREEN}✓ List exported to: $export_file${ENDC}"
    echo -e "${CYAN}You can edit this file and use it as a custom list${ENDC}"
    
    read -p "Press Enter to continue..."
}
